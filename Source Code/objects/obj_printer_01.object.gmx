<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text[0] = "Really long text to test printer line breaking. Really long text to test printer line breaking. #Really long text to test printer line breaking. Really long text to test printer line breaking. #Really long text to test printer line breaking."
text[1] = "Test text 2"
text[2] = "Test text 3"
text[3] = "Test text 4"
text[4] = "Test text 5"
text[5] = "Test text 6"
text[6] = "Test text 7"
current_text = 0
current_char = 1
should_print = true
xorigin = 10
yorigin = 400
xbound = 750
ybound = 750
draw_set_color(c_white)
draw_set_font(fnt_default)
can_go_next = true
wait_for_input = false
input_text = ""
has_blinker = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_go_next = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//print(text[current_text], print_at_x, print_at_y, xbound, ybound)
/*next_word = ""
text_width = 0
text_height = 0
while(should_print) {
    var i = current_char
    next_word = ""
    while(string_char_at(text[current_text], i) != " " &amp;&amp; i &lt; string_length(text[current_text])){
        i++
    }
    if(i &gt;= string_length(text[current_text])) {
        show_debug_message("end")
    }
    next_word = string_copy(text[current_text], current_char, i - current_char)
    current_char = i + 1
    show_debug_message(next_word)
    if (text_width + string_length(next_word) &gt; xbound) {
        text_height += string_height(next_word)
        string_insert("#", text[current_text], current_char - 1)
        string_insert("#", next_word, 0)
        text_width = 0
    }
    if (text_height &lt; ybound) {
        draw_text(xorigin + text_width, yorigin + text_height, next_word)
        text_width += string_width(next_word)
    }
    else {
        should_print = false
    }
    if (current_char &gt;= string_length(text[current_text])) {
        should_print = false
    }
}
if(!should_print) {
    draw_text(xorigin, yorigin, text[current_text])
}*/
if (!wait_for_input) {
    draw_text(xorigin, yorigin, text[current_text])
}
else {
    input_text = keyboard_string
    draw_text(xorigin, yorigin, text[current_text])
    /*if (!has_blinker) {
        instance_create(200, 200, obj_blinker)
        has_blinker = true
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (current_text &lt; array_length_1d(text) - 1 &amp;&amp; can_go_next &amp;&amp; !wait_for_input) {
    current_text++
    can_go_next = false
    alarm_set(0, 15)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
